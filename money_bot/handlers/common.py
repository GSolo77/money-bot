import html
import json
import logging
import traceback

from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import ContextTypes, ConversationHandler, CommandHandler, \
    MessageHandler, filters

from config import TELEGRAM_DEVELOPER_ID
from handlers.keyboards import MAIN_KEYBOARD
from messages.common import START_MESSAGE, MainButtons

logger = logging.getLogger(__name__)


async def start(update: Update, _: ContextTypes.DEFAULT_TYPE) -> str:
    await update.message.reply_text(START_MESSAGE, reply_markup=MAIN_KEYBOARD)
    return 'CHOOSING'


async def reply_to_others(update: Update,
                          _: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message.sticker:
        text = "–ö–ª–∞—Å—Å–Ω—ã–π —Å—Ç–∏–∫–µ—Ä, —Å–æ—Ö—Ä–∞–Ω–∏–ª!"
    elif update.message.video:
        text = "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –≤–∏–¥–µ–æ, –≤–∏–¥–µ–ª –µ–≥–æ –≤—á–µ—Ä–∞!"
    elif update.message.photo:
        text = "–ö–ª–∞—Å—Å–Ω–∞—è —Ñ–æ—Ç–∫–∞!"
    elif update.message.text:
        text = "–¢–∞–∫–∏–µ —Å–ª–æ–∂–Ω—ã–µ —Å–ª–æ–≤–∞ —è –Ω–µ –ø–æ–Ω–∏–º–∞—é."
    else:
        text = "–ß—Ç–æ-—Ç–æ –Ω–∞ —ç–ª—å—Ñ–∏–π—Å–∫–æ–º..."
    text = (
        f'{text}\n\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ª—É—á—à–µ —É–¥–æ–±–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∫–æ–º–∞–Ω–¥.\n'
        '–ê –µ—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫ –∫–∞–∫–æ–π-—Ç–æ –≤–æ–ø—Ä–æ—Å –Ω–∞–∂–º–∏—Ç–µ '
        f'–Ω–∞ –∫–Ω–æ–ø–∫—É ¬´{MainButtons.question}¬ª (/question).'
    )
    await update.message.reply_text(text, reply_markup=MAIN_KEYBOARD)


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Cancels and ends the conversation."""
    await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=MAIN_KEYBOARD)
    context.user_data.clear()

    return ConversationHandler.END


async def error_handler(update: object,
                        context: ContextTypes.DEFAULT_TYPE) -> None:
    """Log the error and send a telegram message to notify the developer."""
    logger.error(
        msg="Exception while handling an update:", exc_info=context.error
    )

    tb_list = traceback.format_exception(
        None, context.error, context.error.__traceback__
    )
    tb_string = "".join(tb_list)

    if isinstance(update, Update):
        update_str = update.to_dict()
    else:
        update_str = str(update)
    html_update_str = html.escape(
        json.dumps(update_str, indent=2, ensure_ascii=False)
    )
    message = (
        f"An exception was raised while handling an update\n"
        f"<pre>update = {html_update_str}"
        "</pre>\n\n<pre>"
        f"context.chat_data = {html.escape(str(context.chat_data))}</pre>"
        f"\n\n<pre>context.user_data = {html.escape(str(context.user_data))}"
        f"</pre>\n\n<pre>{html.escape(tb_string)}</pre>"
    )

    await context.bot.send_message(
        chat_id=TELEGRAM_DEVELOPER_ID, text=message, parse_mode=ParseMode.HTML
    )

    await context.bot.send_message(
        chat_id=update.effective_user.id,
        text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üôÅ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
    )
    return ConversationHandler.END


default_fallbacks = [
    CommandHandler("cancel", cancel),
    MessageHandler(filters.Regex(MainButtons.back_to_menu), cancel)
]
